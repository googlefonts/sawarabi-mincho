name: Build font and specimen

on:
  push:
  release:
    types: [published]

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install sys tools/deps
      run: |
        sudo apt-get update
        sudo apt-get install ttfautohint
        sudo snap install yq
    - uses: actions/cache@v2
      with:
        path: ./venv/
        key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-
    - name: gen zip file name
      id: zip-name
      shell: bash
      # Set the archive name to repo name + "-assets" e.g "MavenPro-assets"
      run: echo "ZIP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')-fonts" >> $GITHUB_ENV

    # If a new release is cut, use the release tag to auto-bump the source files
    # - name: Bump release
    #   if: github.event_name == 'release'
    #   run: |
    #     . venv/bin/activate
    #     SRCS=$(yq e ".sources[]" sources/config.yaml)
    #     TAG_NAME=${GITHUB_REF/refs\/tags\//}
    #     echo "Bumping $SRCS to $TAG_NAME"
    #     for src in $SRCS
    #     do
    #       bumpfontversion sources/$src --new-version $TAG_NAME;
    #     done

    - name: Build font
      run: make build
    - name: Check with fontbakery
      run: make test
      continue-on-error: true
    - name: proof
      run: make proof
    - name: setup site
      run: cp scripts/index.html out/index.html
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./out
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_NAME }}
        path: |
          fonts/ttf
          out
    outputs:
      zip_name: ${{ env.ZIP_NAME }}
  
  release_ready_asset:
    name: Prepare release artifacts
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || (github.event_name == 'release')
    env:
      ZIP_NAME: ${{ needs.build.outputs.zip_name }}
    steps:
      - uses: actions/checkout@v2
      - name: Download font artefact files
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
      - name: Copy DESCRIPTION.en_us.html to artefact directory
        run: cp documentation/DESCRIPTION.en_us.html ${{ env.ZIP_NAME }}/DESCRIPTION.en_us.html
      - name: Copy ARTICLE.en_us.html to artefact directory
        run: cp documentation/ARTICLE.en_us.html ${{ env.ZIP_NAME }}/ARTICLE.en_us.html
        continue-on-error: true
      - name: Copy OFL.txt to artefact directory
        run: cp OFL.txt ${{ env.ZIP_NAME }}/OFL.txt
      - name: Remove proof/fontbakery stuff from release
        run: rm -rf ${{ env.ZIP_NAME }}/out
      - name: gen release file name (if it's a release)
        if: github.event_name == 'release'
        shell: bash
        # Set the archive name to repo name + "-" + release tag name e.g "MavenPro-v1.234"
        run: echo "RELEASE_ZIP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')-${{github.event.release.tag_name}}" >> $GITHUB_ENV 
      - name: gen release file name (if it's a tag)
        if: github.event_name != 'release'
        shell: bash
        run: echo "RELEASE_ZIP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')-${{github.ref_name}}" >> $GITHUB_ENV 
      - name: Create release bundle
        run: mv ${{ env.ZIP_NAME }} ${{ env.RELEASE_ZIP_NAME }}; zip -r ${{ env.RELEASE_ZIP_NAME }}.zip ${{ env.RELEASE_ZIP_NAME }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-artifact
          path: ${{ env.RELEASE_ZIP_NAME }}.zip

  # create_release:
  #   name: Create GH release from pushed tag
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create release
  #       id: release
  #       run: git show -s --format=%B ${{ github.ref_name }} | tail -n +4 | gh release create ${{ github.ref_name }} -t ${{ github.ref_name }} -F -
  #       continue-on-error: true
  #   outputs:
  #     result: ${{ steps.release.outcome }}

  # # When the user triggers a release (either from a tag or from the GitHub UI),
  # # we want to create a release bundle containing the built fonts, plus
  # # license and description (and article, if there is one), and then attach
  # # that to the release.
  # # For case 1 (from a tag), we have to do this only after create_release has
  # # finished. For case 2 (from the GitHub UI), we have to do this on the
  # # "release" event where "type==published". Note that pushing a tag does
  # # not trigger a "release" event! So we have to "need" both "build" and
  # # "create_release", but we use "always()" to make sure that the job runs
  # # in both cases.
  # add_artefacts:
  #   name: Add binary artefacts to release
  #   needs:
  #     - build
  #     - create_release
  #   if: |
  #     always() && (
  #       github.event_name == 'release'
  #     ) || (
  #       (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) && needs.create_release.outputs.result != 'failure'
  #     )
  #     - name: Upload binaries to release
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: ${{ env.RELEASE_ZIP_NAME }}.zip
  #         asset_name: ${{ env.RELEASE_ZIP_NAME }}.zip
  #         tag: ${{ github.ref }}
  #         overwrite: true
